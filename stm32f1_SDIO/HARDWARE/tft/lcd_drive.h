/**********************************************************
* @ File name -> lcd_drive.h
* @ Version   -> V1.0
* @ Date      -> 12-15-2013
* @ Brief     -> TFT彩屏底层驱动函数头文件
**********************************************************/

#ifndef _lcd_drive_h_
#define _lcd_drive_h_

/**********************************************************
                     外部函数头文件
         应用到不同的外设头文件请在这里修改即可                        
**********************************************************/

#include "STM32_config.h"

/**********************************************************
                      定义接口信息                       
**********************************************************/

#define LCD_BLControl               PBout(0)    //背光控制

/**********************************************************
                    控制LCD相关的宏定义
**********************************************************/

#define _LCD_RESET_Soft              0     /* LCD复位是用软件控制还是硬件控制定义 */
                                          //0: 使用硬件控制复位
                                          //1: 使用软件控制复位

#define _USER_GPIO_OR_FSMC           1     /* 控制方式。FSMC or GPIO */
                                          //0: 使用普通的GPIO控制
                                          //1: 使用FSMC控制，类似控制NOR SRAM一样

//=========================================================
#if !_USER_GPIO_OR_FSMC	//只有开启了GPIO控制时才要设置下面参数
//=========================================================
/* 下面两个宏定义只有开启了GPIO控制LCD接口才要设置，硬件（或FSMC）控制的时候不管 */

#define _USER_PSB_Soft               0     /* 是否软件控制数据总线位数选择【具体输出电平在GPIO初始化里面完成】 */
                                          //0: 使用硬件控制
                                          //1: 使用软件控制

#define _USER_8BIT_16BIT             1     /* 8 or 16位数据接口选择【FSMC数据总线宽度由初始化是决定】 */
                                          //0: 使用8bit数据总线
                                          //1: 使用16bit数据总线
//=========================================================
#endif	//end _USER_GPIO_OR_FSMC
//=========================================================

//=========================================================
#if _LCD_RESET_Soft   //定义了则使用软件控制复位
//=========================================================

      #define LCD_RST               /* 软件控制复位管脚定义。比如PAout(0) */

//=========================================================
#endif	//end _LCD_RESET_Soft
//=========================================================

//=========================================================
#if _USER_PSB_Soft    //定义了则使用软件控制数据总线宽度
//=========================================================

      #define LCD_IM0               /* 软件控制LCD数据总线宽度控制线定义。比如PAout(0) */

//=========================================================
#endif	//end _USER_PSB_Soft
//=========================================================

//=========================================================
#if _USER_GPIO_OR_FSMC    //定义则使用FSMC控制LCD
//========================================================= 

//所接的地址线地址相对于块管理基地址的偏移量计算
//RAM地址 = Bank(x).region(y) + 2 * (2^n)
//参数解说：x：块编号
//          y：管理区域
//          n：外部所接的地址线号
/**********************************************************
              FSMC Bank1所管理的区域说明
**********************************************************/
/*
	 _______________________________________________________________________________
	|  所选的Bank   | 片选信号 |          地址范围         | [27:26] |    [25:0]    |
	|_______________|__________|___________________________|_________|______________|
	| Bank1.region1 | FSMC_NE1 | 0x6000,0000 ~ 0x63ff,ffff |    00   |              |
	|_______________|__________|___________________________|_________|              |
	| Bank1.region2 | FSMC_NE2 | 0x6400,0000 ~ 0x67ff,ffff |    01   | FSMC_A[25:0] |
	|_______________|__________|___________________________|_________|              |
	| Bank1.region3 | FSMC_NE3 | 0x6800,0000 ~ 0x6bff,ffff |    10   |              |
	|_______________|__________|___________________________|_________|              |
	| Bank1.region4 | FSMC_NE4 | 0x6c00,0000 ~ 0x6fff,ffff |    11   |              |
	|_______________|__________|___________________________|_________|______________|
	
*/                                  
	  /* 使用不同的控制块基地址是不一样的 */
      #define LCD_REG_ADD           ((u32)(0x6c000000 | 0x00000000)) //寄存器地址，命令,RS = 0
      #define LCD_DAT_ADD           ((u32)(0x6c000000 | 0x00000800)) //显示数据地址，显示RAM,RS = 1

      #define LCD_WR_REG(index)     ((*(__IO u16 *)(LCD_REG_ADD)) = ((u16)index))	//写LCD寄存器写入数值index
      #define LCD_WR_Data(val)      ((*(__IO u16 *)(LCD_DAT_ADD)) = ((u16)val))		//往LCD的RAM写入数据val

//=========================================================
#else //否则使用GPIO控制
//=========================================================

      #define LCD_RS                /* LCD命令 <---> 数据选择控制线定义，比如PAout(0) */
      #define LCD_CS                /* LCD片选控制线定义，比如PAout(0) */
      #define LCD_RD                /* 比如PAout(0) */
      #define LCD_WR                /* LCD读、写控制线定义，比如PAout(0) */

      //===================================================
      #if _USER_8BIT_16BIT  //如果定义了则使用的是16bit总线
      //===================================================

      #define LCD_BUS_DBout16(val)    /* LCD写入数据函数。比如：GPIO_Write(GPIOB, (uint16_t)val) */
      #define LCD_BUS_DBin16()        /* LCD读取数据函数。比如：(uint16_t)GPIO_ReadInputData(GPIOB) */

	  /* 读取数据时设置数据总线方向为输入 */
      //比如：#define LCD_BUS_IN16()          {GPIOB->CRL &= 0xffffffff;GPIOB->CRL |= 0x88888888;GPIOB->CRH &= 0xffffffff;GPIOB->CRH |= 0x88888888;}
      /* 写入数据时设置数据总线方向为输出 */
	  //比如：#define LCD_BUS_OUT16()         {GPIOB->CRL &= 0xffffffff;GPIOB->CRL |= 0x33333333;GPIOB->CRH &= 0xffffffff;GPIOB->CRH |= 0x33333333;}

      //===================================================
      #else //否则使用8bit总线
      //===================================================

      #define LCD_BUS_DBout8(val)    /* LCD写入数据函数。比如：GPIO_Write(GPIOB, (uint8_t)val) */
      #define LCD_BUS_DBin8()        /* LCD读取数据函数。比如：(uint8_t)GPIO_ReadInputData(GPIOB) */

	  /* 读取数据时设置数据总线方向为输入 */
      //比如：#define LCD_BUS_IN8()          {GPIOB->CRL &= 0xffffffff;GPIOB->CRL |= 0x88888888;}
      /* 写入数据时设置数据总线方向为输出 */
	  //比如：#define LCD_BUS_OUT8()         {GPIOB->CRL &= 0xffffffff;GPIOB->CRL |= 0x33333333;}

      //===================================================
      #endif	//end _USER_8BIT_16BIT
      //===================================================

//=========================================================
#endif	//end _USER_GPIO_OR_FSMC
//=========================================================

/**********************************************************
                       外部功能函数                      
**********************************************************/

#if _USER_GPIO_OR_FSMC      //定义了则使用FSMC控制

void STM32_FSMC_Init(void);   //FSMC初始化

#else	//使用GPIO控制时调用下面函数

void LCD_GPIO_Init(void);     //通讯、控制端口初始化

#endif

void LCD_RST_BL_Init(void);   //背光、复位控制端口初始化
      
void LCD_Write_Register(u16 reg_val);     //写数据到LCD寄存器（主要写命令或寄存器地址）

void LCD_Write_Data(u16 dat); //写数据到LCD RAM

u16 LCD_Read_Data(void);      //读取LCD数据

void LCD_WriteRegisterData(u16 reg, u16 dat);   //向LCD某个寄存器写入数据

u16 LCD_ReadRegisterData(u16 reg);  //读取LCD某个寄存器数值


#endif

